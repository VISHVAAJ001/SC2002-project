@startuml

' --- Settings ---
skinparam classAttributeIconSize 0
hide empty members
skinparam packageStyle rect
skinparam linetype ortho

' --- Enums (Newline Separated Format) ---
enum MaritalStatus {
    SINGLE
    MARRIED
}
enum ApplicationStatus {
    PENDING
    SUCCESSFUL
    UNSUCCESSFUL
    BOOKED
    WITHDRAWN
}
enum OfficerRegStatus {
    PENDING
    APPROVED
    REJECTED
}
enum UserRole {
    APPLICANT
    HDB_OFFICER
    HDB_MANAGER
}

' --- Entity Layer ---
package Entity <<Folder>> {
    abstract class User {
        # nric : String
        # passwordHash : String
        # name : String ' Added for receipt/reporting
        # age : int
        # maritalStatus : MaritalStatus
        # role : UserRole <<get>>
        + {abstract} getRole() : UserRole
        + verifyPassword(password: String) : boolean
        + updatePasswordHash(newHash: String) : void
        ' Getters for attributes needed by other layers
        + getNric() : String
        + getName() : String
        + getAge() : int
        + getMaritalStatus() : MaritalStatus
    }

    class Applicant extends User {
        - currentApplicationId : String <<nullable>>
        + getRole() : UserRole <<override>>
        ' Getters/Setters for applicationId
    }

    abstract class HDBStaff extends User {
        ' Common staff attributes if any
    }

    class HDBOfficer extends HDBStaff {
        - handledProjectId : String <<nullable>> ' Project currently handling for booking
        + getRole() : UserRole <<override>>
        ' Getters/Setters for handledProjectId
    }

    class HDBManager extends HDBStaff {
        + getRole() : UserRole <<override>>
        ' May handle one project during application period - logic handled by controller/service
    }

    class ProjectFlatInfo {
        + typeName : String {"2-Room", "3-Room"}
        + totalUnits : int
        + remainingUnits : int
        + decreaseRemainingUnits() : boolean <<returns success>>
        + increaseRemainingUnits() : void ' For withdrawals before booking etc.
    }

    class Project {
        + projectId : String
        + projectName : String
        + neighborhood : String
        + flatTypes : Map<String, ProjectFlatInfo> <<get>>
        + openingDate : LocalDate
        + closingDate : LocalDate
        + managerInChargeNRIC : String
        + maxOfficerSlots : int = 10
        + isVisible : boolean = true
        + approvedOfficerNRICs : List<String> <<get>> ' List of NRICs of approved officers
        + setVisibility(visible: boolean) : void
        + addApprovedOfficer(nric: String) : boolean ' Checks count < maxSlots
        + removeApprovedOfficer(nric: String) : void
        + getFlatInfo(flatType: String) : ProjectFlatInfo <<nullable>>
    }

    class Application {
        + applicationId : String
        + applicantNRIC : String <<get>>
        + projectId : String <<get>>
        + submissionDate : LocalDate <<get>>
        + status : ApplicationStatus = PENDING
        + setStatus(newStatus: ApplicationStatus) : void
    }

    class Booking {
        + bookingId : String
        + applicationId : String <<get>>
        + applicantNRIC : String <<get>>
        + projectId : String <<get>>
        + bookedFlatType : String <<get>>
        + bookingDate : LocalDate <<get>>
    }

    class Enquiry {
        + enquiryId : String
        + userNRIC : String <<get>>
        + projectId : String <<nullable>>
        + content : String
        + reply : String <<nullable>>
        + isReplied : boolean = false
        + submissionDate : LocalDate <<get>>
        + replyDate : LocalDate <<nullable>>
        + addReply(replyContent: String, replyDate: LocalDate) : void
        + editContent(newContent: String) : void
    }

    class OfficerRegistration {
        + registrationId : String
        + officerNRIC : String <<get>>
        + projectId : String <<get>>
        + requestDate : LocalDate <<get>>
        + status : OfficerRegStatus = PENDING
        + setStatus(newStatus: OfficerRegStatus) : void
    }
}

' --- Repository (Data Persistence) Layer ---
package Repository <<Folder>> {
    ' --- Generic Base Interface ---
    interface IRepository<T, ID> <<DIP>> {
        + findById(id : ID) : T <<nullable>>
        + findAll() : Map<ID, T> ' Using Map for consistency with current loadAll
        + save(entity : T) : void
        + saveAll(entities: Map<ID, T>) : void ' Save the entire current state
        + loadAll() : Map<ID, T> ' Load all from persistence
        ' + delete(entity: T) : void ' Optional: Add if needed
        ' + deleteById(id: ID) : void ' Optional: Add if needed
    }

    ' --- Specific Interfaces (Extend the Generic Base) ---
    interface IUserRepository extends IRepository<User, String> {
        ' Add any user-specific query methods here (if needed later)
    }

    interface IProjectRepository extends IRepository<Project, String> {
        ' Add any project-specific query methods here (if needed later)
    }

    interface IApplicationRepository extends IRepository<Application, String> {
        + findByApplicantNric(nric: String) : Application <<nullable>>
        + findByProjectId(projectId: String) : List<Application>
        ' Add other application-specific methods if needed
    }

    interface IBookingRepository extends IRepository<Booking, String> {
        + findByApplicantNric(nric: String) : Booking <<nullable>>
    }

    interface IEnquiryRepository extends IRepository<Enquiry, String> {
        + findByUserNric(nric: String) : List<Enquiry>
        + findByProjectId(projectId: String) : List<Enquiry>
    }

    interface IOfficerRegistrationRepository extends IRepository<OfficerRegistration, String> {
        + findByOfficerNric(nric: String) : List<OfficerRegistration>
        + findByProjectId(projectId: String) : List<OfficerRegistration>
    }

    ' --- (FileIOHelper remains the same) ---
    class FileIOHelper {  }

    ' --- Concrete File Implementations (Implement Specific Interfaces) ---
    class FileUserRepository implements IUserRepository {
        - filePath : String
        - users : Map<String, User>
        + FileUserRepository(filePath: String)
        ' + Implement methods from IRepository<User, String> and IUserRepository
    }

    class FileProjectRepository implements IProjectRepository {
        - projectFilePath : String
        - flatInfoFilePath : String
        - projects : Map<String, Project>
        + FileProjectRepository(projectFilePath: String, flatInfoFilePath: String)
        ' + Implement methods from IRepository<Project, String> and IProjectRepository
    }

    class FileApplicationRepository implements IApplicationRepository {
        - filePath : String
        - applications : Map<String, Application>
        + FileApplicationRepository(filePath: String)
        ' + Implement methods from IRepository<Application, String> and IApplicationRepository
    }

    ' --- (Other File...Repository classes implement their specific interfaces) ---
    class FileBookingRepository implements IBookingRepository { }
    class FileEnquiryRepository implements IEnquiryRepository {  }
    class FileOfficerRegistrationRepository implements IOfficerRegistrationRepository { }

}

' --- Service Layer ---
package Service <<Folder>> {
    interface IBookingService <<ISP>> {
         + performBooking(officer: HDBOfficer, applicantNRIC: String, flatType: String) : Booking <<throws BookingException>>
    }

    class BookingService implements IBookingService {
        - applicationRepo : Map<String, Application>
        - projectRepo : Map<String, Project>
        - bookingRepo : Map<String, Booking>
        - dataManager : IDataManager
        + BookingService(appMap, projMap, bookMap, dataMgr)
        + performBooking(officer: HDBOfficer, applicantNRIC: String, flatType: String) : Booking <<throws BookingException>>
    }

    interface IReceiptService <<ISP>> {
        + generateBookingReceipt(booking: Booking, applicant: User, project: Project) : String
    }

    class ReceiptService implements IReceiptService {
         + generateBookingReceipt(booking: Booking, applicant: User, project: Project) : String
    }

    interface IEligibilityService <<ISP>> {
         + canApplicantApply(applicant: Applicant, project: Project) : boolean
         + canOfficerRegister(officer: HDBOfficer, project: Project, allRegistrations: Collection<OfficerRegistration>, allApplications: Collection<Application>) : boolean
    }

    class EligibilityService implements IEligibilityService {
         + canApplicantApply(applicant: Applicant, project: Project) : boolean
         + canOfficerRegister(officer: HDBOfficer, project: Project, allRegistrations: Collection<OfficerRegistration>, allApplications: Collection<Application>) : boolean
    }
}

' --- Control Layer ---
package Control <<Folder>> {
    class AuthenticationController {
        - userRepo : Map<String, User>
        - dataManager : IDataManager
        + AuthenticationController(userMap, dataMgr)
        + login(nric: String, password: String) : User <<nullable>>
        + logout() : void
        + changePassword(user: User, newPassword: String) : boolean
    }

    class ProjectController {
        - projectRepo : Map<String, Project>
        - dataManager : IDataManager
        + ProjectController(projMap, dataMgr)
        + createProject(...) : Project
        + editProject(manager: HDBManager, projectId: String, ...) : boolean
        + deleteProject(manager: HDBManager, projectId: String) : boolean
        + toggleVisibility(manager: HDBManager, projectId: String) : boolean
        + getVisibleProjectsForUser(user: User) : List<Project>
        + getAllProjects(manager: HDBManager) : List<Project>
        + getProjectsManagedBy(managerNRIC: String) : List<Project>
        + findProjectById(projectId: String) : Project <<nullable>>
    }

    class ApplicationController {
        - applicationRepo : Map<String, Application>
        - projectRepo : Map<String, Project>
        - dataManager : IDataManager
        - eligibilityService : IEligibilityService
        + ApplicationController(appMap, projMap, dataMgr, eligSvc)
        + submitApplication(applicant: Applicant, projectId: String) : boolean <<throws ApplicationException>>
        + requestWithdrawal(applicant: Applicant) : boolean <<throws ApplicationException>>
        + approveApplication(manager: HDBManager, applicationId: String) : boolean
        + rejectApplication(manager: HDBManager, applicationId: String) : boolean
        + approveWithdrawal(manager: HDBManager, applicationId: String) : boolean
        + rejectWithdrawal(manager: HDBManager, applicationId: String) : boolean
        + getApplicationForUser(applicantNRIC: String) : Application <<nullable>>
        + getApplicationsByProject(projectId: String) : List<Application>
        + getApplicationsByStatus(status: ApplicationStatus) : List<Application>
    }

    class OfficerController {
        - registrationRepo : Map<String, OfficerRegistration>
        - projectRepo : Map<String, Project>
        - userRepo : Map<String, User>
        - dataManager : IDataManager
        - eligibilityService : IEligibilityService
        - bookingService : IBookingService
        - receiptService : IReceiptService
        + OfficerController(regMap, projMap, userMap, dataMgr, eligSvc, bookSvc, receiptSvc)
        + requestProjectRegistration(officer: HDBOfficer, projectId: String) : boolean <<throws RegistrationException>>
        + getRegistrationStatus(officer: HDBOfficer, projectId: String) : OfficerRegStatus <<nullable>>
        + approveRegistration(manager: HDBManager, registrationId: String) : boolean
        + rejectRegistration(manager: HDBManager, registrationId: String) : boolean
        + handleFlatBooking(officer: HDBOfficer, applicantNRIC: String, flatType: String) : String <<throws BookingException>>
        + getPendingRegistrations() : List<OfficerRegistration>
        + getRegistrationsByProject(projectId: String) : List<OfficerRegistration>
    }

    class EnquiryController {
        - enquiryRepo : Map<String, Enquiry>
        - dataManager : IDataManager
        + EnquiryController(enqMap, dataMgr)
        + createEnquiry(user: User, projectId: String <<nullable>>, content: String) : Enquiry
        + viewMyEnquiries(user: User) : List<Enquiry>
        + editEnquiry(enquiryId: String, newContent: String, user: User) : boolean
        + deleteEnquiry(enquiryId: String, user: User) : boolean
        + replyToEnquiry(enquiryId: String, replyContent: String, staff: HDBStaff) : boolean
        + viewAllEnquiries(manager: HDBManager) : List<Enquiry>
        + viewProjectEnquiries(staff: HDBStaff, projectId: String) : List<Enquiry>
    }

    class ReportController {
        - applicationRepo : Map<String, Application>
        - bookingRepo : Map<String, Booking>
        - projectRepo : Map<String, Project>
        - userRepo : Map<String, User>
        + ReportController(appMap, bookMap, projMap, userMap)
        + generateBookingReport(filters: Map<String, String>) : String
    }
}

' --- Views Layer (CLI) ---
package Views <<Folder>> {
    class MainApp {
        - currentUser : User <<nullable>>
        + run() : void
        - showLoginMenu() : void
        - routeToRoleUI(user: User) : void
    }

    abstract class BaseUI {
        # scanner : Scanner
        + displayMessage(message: String) : void
        + promptForInput(prompt: String) : String
        + promptForInt(prompt: String) : int
        # clearConsole() : void
        # displayError(message: String) : void
    }

    class LoginUI extends BaseUI {
        - authController : AuthenticationController
        + displayLogin() : User <<nullable>>
        + displayChangePassword(user: User) : void
    }

    class ApplicantUI extends BaseUI {
        - user : Applicant
        - projectController : ProjectController
        - appController : ApplicationController
        - enquiryController : EnquiryController
        + displayMainMenu() : void
    }

    class HDBOfficerUI extends BaseUI {
        - user : HDBOfficer
        - projectController : ProjectController
        - officerController : OfficerController
        - enquiryController : EnquiryController
        + displayMainMenu() : void
    }

    class HDBManagerUI extends BaseUI {
        - user : HDBManager
        - projectController : ProjectController
        - appController : ApplicationController
        - officerController : OfficerController
        - enquiryController : EnquiryController
        - reportController : ReportController
        + displayMainMenu() : void
    }

    class CommonUI extends BaseUI {
         + displayProjectList(projects: List<Project>, showVisibility: boolean) : void
         + displayApplicationList(applications: List<Application>) : void
         + displayEnquiryList(enquiries: List<Enquiry>) : void
         + selectProjectFromList(projects: List<Project>) : Project <<nullable>>
    }
}

package Utility <<Folder>> {
    class FileUtil {
        + readFile(path: String) : String
        + writeFile(path: String, data: String) : boolean
    }
    class InputUtil {
        + {static} validateNRIC(nric: String) : boolean
        + {static} readDate(prompt: String, scanner: Scanner) : LocalDate
        + {static} readMandatoryString(prompt: String, scanner: Scanner) : String
    }
}

package Exception <<Folder>> {
    class BookingException extends Exception {
        + BookingException(message: String)
    }


    class ApplicationException extends Exception { 
        + ApplicationException(msg: String) 
    }
    
    class RegistrationException extends Exception { 
        + RegistrationException(msg: String) 
    }
}

' --- Relationships ---

' Layers Dependencies (Conceptual)
Views ..> Control : uses
Control ..> Service : uses
Service ..> Repository : uses
Service ..> Entity : uses
Service ..> Exception: uses
Control ..> Repository : uses
Control ..> Entity : uses
Control ..> Exception : uses
Views ..> Entity : uses


' Composition / Aggregation
Project "1" *-- "1..*" ProjectFlatInfo : contains
Project "1" o-- "*" Application : has
Project "1" o-- "*" Booking : results in
Project "1" o-- "*" Enquiry : related to
Project "1" o-- "*" OfficerRegistration : requests for
Project "1" *-- "0..*" User : approved officers (NRIC list)

Application "1" -- "1" Applicant : submitted by
Application "1" -- "1" Project : for
Booking "1" -- "1" Application : fulfills
Booking "1" -- "1" Project : for
Booking "1" -- "1" Applicant : by

Enquiry "1" -- "1" User : submitted by

OfficerRegistration "1" -- "1" HDBOfficer : requested by
OfficerRegistration "1" -- "1" Project : for

' Controller Dependencies (Illustrative)
AuthenticationController ..> IUserRepository
ProjectController ..> IProjectRepository
ApplicationController ..> IApplicationRepository
ApplicationController ..> IEligibilityService
OfficerController ..> IOfficerRegistrationRepository
OfficerController ..> IEligibilityService
OfficerController ..> IBookingService
OfficerController ..> IReceiptService
EnquiryController ..> IEnquiryRepository
ReportController ..> IDataManager

' Service Dependencies
BookingService ..> IApplicationRepository
BookingService ..> IProjectRepository
BookingService ..> IBookingRepository
BookingService ..> IUserRepository
EligibilityService ..> User
EligibilityService ..> Project



' UI Dependencies
MainApp --> LoginUI
MainApp --> ApplicantUI
MainApp --> HDBOfficerUI
MainApp --> HDBManagerUI
MainApp --> CommonUI
LoginUI ..> AuthenticationController
ApplicantUI ..> ProjectController
ApplicantUI ..> ApplicationController
ApplicantUI ..> EnquiryController
HDBOfficerUI ..> ProjectController
HDBOfficerUI ..> OfficerController
HDBOfficerUI ..> EnquiryController
HDBManagerUI ..> ProjectController
HDBManagerUI ..> ApplicationController
HDBManagerUI ..> OfficerController
HDBManagerUI ..> EnquiryController
HDBManagerUI ..> ReportController

Repository ..> Utility : uses

@enduml